// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Relations to existing user types
  student    Student?
  instructor Instructor?
  admin      Admin?
}

// Existing Application Models
model Course {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  grade       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  students Student[] @relation("StudentCourses")
  classes  Class[]
}

model Class {
  id        Int      @id @default(autoincrement())
  name      String
  startTime DateTime
  endTime   DateTime
  location  String
  status    String

  courseId     Int
  instructorId Int

  course     Course     @relation(fields: [courseId], references: [id])
  instructor Instructor @relation(fields: [instructorId], references: [id])
  students   Student[]  @relation("StudentClasses")

  @@index([courseId])
  @@index([instructorId])
}

model Student {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gpa       Float

  // Relation to NextAuth User
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  courses Course[] @relation("StudentCourses")
  classes Class[]  @relation("StudentClasses")
}

model Instructor {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to NextAuth User
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  classes Class[]
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to NextAuth User
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])
}
