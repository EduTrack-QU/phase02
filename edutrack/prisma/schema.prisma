// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
//   output   = "./client"
// }

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Central User model for NextAuth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?   // "STUDENT", "INSTRUCTOR", or "ADMIN"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Auth relations
  accounts      Account[]
  sessions      Session[]
  
  // Domain model relations
  student       Student?
  instructor    Instructor?
  admin         Admin?
}

// Application Domain Models
model Course {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  grade       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)

  students    Student[]  @relation("StudentCourses")
  classes     Class[]
}

model Class {
  id           Int          @id @default(autoincrement())
  name         String
  startTime    DateTime
  endTime      DateTime
  location     String
  status       String       @default("SCHEDULED") // "SCHEDULED", "IN_PROGRESS", "COMPLETED", "CANCELLED"
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  courseId     Int
  instructorId Int

  course       Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  instructor   Instructor   @relation(fields: [instructorId], references: [id], onDelete: Restrict)
  students     Student[]    @relation("StudentClasses")

  @@index([courseId])
  @@index([instructorId])
}

model Student {
  id           Int        @id @default(autoincrement())
  gpa          Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  isActive     Boolean    @default(true)

  userId       String     @unique
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  courses      Course[]   @relation("StudentCourses")
  classes      Class[]    @relation("StudentClasses")
  
  @@index([userId])
}

model Instructor {
  id           Int        @id @default(autoincrement())
  speciality   String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  isActive     Boolean    @default(true)

  userId       String     @unique
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  classes      Class[]
  
  @@index([userId])
}

model Admin {
  id           Int        @id @default(autoincrement())
  permissions  String?    // Could be JSON or specific permissions
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  isActive     Boolean    @default(true)

  userId       String     @unique
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}